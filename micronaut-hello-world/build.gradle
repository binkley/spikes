plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
    id "net.ltgt.errorprone" version "0.8.1"
}

version "0.1"
group "hello.world"

ext {
    lombokVersion = "1.18.8"
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:1.2.0.RC1"
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    errorprone "com.google.errorprone:error_prone_core:2.3.3"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    // TODO: Why?
    compile "io.micronaut.configuration:micronaut-hibernate-validator"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-client"
    compile "javax.annotation:javax.annotation-api"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-management"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "hello.world.Application"

test {
    useJUnitPlatform()
}

//tasks.withType(JavaCompile).configureEach {
//}
tasks.withType(JavaCompile) {
    options.errorprone.disableWarningsInGeneratedCode = true
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs("-noverify", "-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote")

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "5.5"
}
